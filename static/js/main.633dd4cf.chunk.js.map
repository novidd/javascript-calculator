{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Calculator","props","state","formula","previousOperand","currentOperand","operation","undefined","clear","bind","compute","appendNumber","chooseOperation","this","setState","e","innerText","target","value","includes","toString","computation","prev","parseFloat","current","isNaN","eval","id","onClick","className","React","Component"],"mappings":"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","file":"static/js/main.633dd4cf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formula: \"\",\n      previousOperand: \"\",\n      currentOperand: \"0\",\n      operation: undefined\n    }\n    this.clear = this.clear.bind(this);\n    this.compute = this.compute.bind(this);\n    this.appendNumber = this.appendNumber.bind(this);\n    this.chooseOperation = this.chooseOperation.bind(this);\n  }\n  clear() {\n    this.setState({\n      formula: \"\",\n      previousOperand: \"\",\n      currentOperand: \"0\",\n      operation: undefined,\n    });\n  }\n  appendNumber(e) {\n    const display = document.getElementById(\"display\");\n    if (display.innerText === \"0\") {\n      this.setState({\n        formula: this.state.formula.toString() + e.target.value.toString(),\n        currentOperand: e.target.value,\n      });\n      return;\n    }\n    if (e.target.value === \".\" && this.state.currentOperand.includes(\".\")) return;\n    this.setState({\n      formula: this.state.formula.toString() + e.target.value.toString(),\n      currentOperand: this.state.currentOperand.toString() + e.target.value.toString(), \n    });\n  }\n  chooseOperation(e) {\n    if (this.currentOperand === \"\") return;\n    if (this.previousOperand !== \"\") {\n      this.compute();\n    }\n    this.setState({\n      formula: this.state.formula.toString() + e.target.value.toString(),\n      operation: e.target.value,\n      previousOperand: this.state.currentOperand,\n      currentOperand: \"\"\n    });\n  }\n  compute() {\n    let computation;\n    const prev = parseFloat(this.state.previousOperand);\n    const current = parseFloat(this.state.currentOperand);\n    if (isNaN(prev) || isNaN(current)) return;\n    switch (this.state.formula[0]) {\n      case \"/\":\n      case \"*\":\n      case \"+\":\n        return;\n    }\n\n    computation = eval(this.state.formula);\n    this.setState({\n      formula: \"\" + computation.toString(),\n      currentOperand: computation,\n      operation: undefined,\n      previousOperand: \"\",\n    });\n  }\n  render() {\n    return (\n      <div id=\"calculator\">\n        <div id=\"display-wrapper\">\n          <div id=\"input\">{this.state.formula}</div>\n          <div id=\"display\">{this.state.currentOperand}</div>\n        </div>\n        <div id=\"grid\">\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"zero\" value=\"0\">0</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"one\" value=\"1\">1</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"two\" value=\"2\">2</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"three\" value=\"3\">3</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"four\" value=\"4\">4</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"five\" value=\"5\">5</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"six\" value=\"6\">6</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"seven\" value=\"7\">7</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"eight\" value=\"8\">8</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"nine\" value=\"9\">9</button>\n          <button onClick={this.appendNumber} className=\"calc-btn\" id=\"decimal\" value=\".\">.</button>\n          <button onClick={this.chooseOperation} className=\"calc-btn\" id=\"add\" value=\"+\">+</button>\n          <button onClick={this.chooseOperation} className=\"calc-btn\" id=\"subtract\" value=\"-\">-</button>\n          <button onClick={this.chooseOperation} className=\"calc-btn\" id=\"multiply\" value=\"*\">*</button>\n          <button onClick={this.chooseOperation} className=\"calc-btn\" id=\"divide\" value=\"/\">/</button>\n          <button onClick={this.compute} className=\"calc-btn\" id=\"equals\">=</button>\n          <button onClick={this.clear} className=\"calc-btn\" id=\"clear\">AC</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"],"sourceRoot":""}